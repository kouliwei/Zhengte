#include "nvic.h"



static void NVIC_ConfigUsart(void);
static void NVIC_ConfigTIM3(void);
static void NVIC_ConfigTIM4(void);
static void NVIC_ConfigDma(void);
static void NVIC_ConfigExit(void);



extern void  NVIC_Config(void)
{
	
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);      //分组
	NVIC_ConfigUsart();
//	NVIC_ConfigTIM4();
//	NVIC_ConfigTIM3();
//	NVIC_ConfigDma();
	NVIC_ConfigExit();
	 
}





extern void EXTILine0_Config(void)
{
	EXTI_InitTypeDef   EXTI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOA clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
  
  /* Configure PA0 pin as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_Init(GPIOA, &GPIO_InitStructure);

  /* Connect EXTI Line0 to PA0 pin */
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);

  /* Configure EXTI Line0 */
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);

 
}

extern void EXTILine15_Config(void)
{
	EXTI_InitTypeDef   EXTI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOG clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
  
  /* Configure PG15 pin as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
  GPIO_Init(GPIOG, &GPIO_InitStructure);

  /* Connect EXTI Line15 to PG15 pin */
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOG, EXTI_PinSource15);

  /* Configure EXTI Line15 */
  EXTI_InitStructure.EXTI_Line = EXTI_Line15;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
  
}

static void NVIC_ConfigExit(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;   
	
//	/* Enable and set EXTI Line0 Interrupt to the lowest priority */
//  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
//  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
//  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;
//  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
//  NVIC_Init(&NVIC_InitStructure);
	
	/* Enable and set EXTI Line0 Interrupt to the lowest priority */
  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
	
}


static void NVIC_ConfigDma(void)
{
	 NVIC_InitTypeDef NVIC_InitStructure;   
	 NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;    //DMA_Stream0中断
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //抢占优先级0
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;         //响应优先级0
 	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //使能
 	 NVIC_Init(&NVIC_InitStructure);
}

static void NVIC_ConfigUsart(void)
{
	 NVIC_InitTypeDef NVIC_InitStructure;   
	 NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;    //串口1中断
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //抢占优先级0
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;         //响应优先级0
 	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //使能
 	 NVIC_Init(&NVIC_InitStructure);
}



static void NVIC_ConfigTIM3(void)
{
	 NVIC_InitTypeDef NVIC_InitStructure;  
	 NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;    //TIM3中断
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //抢占优先级0
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;         //响应优先级0
 	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //使能
 	 NVIC_Init(&NVIC_InitStructure);
}


static void NVIC_ConfigTIM4(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;    //TIM3中断
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //抢占优先级0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;         //响应优先级0
 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //使能
 	NVIC_Init(&NVIC_InitStructure);
}
